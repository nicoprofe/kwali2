import { getAuth } from 'firebase/auth'
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useCart } from '../TuPutaHermanContext'
import Modal from '../components/Modal'
import useModal from '../hooks/useModal'
import { style } from '../components/Styles'
import { addDoc, collection, getDocs, orderBy, query, where } from 'firebase/firestore'
import { db } from '../firebase'
import { getDownloadURL, getStorage, ref, uploadBytesResumable } from 'firebase/storage'
import { v4 as uuidv4 } from 'uuid'
import { toast } from 'react-toastify'
import { useAuthStatus } from '../hooks/useAuthStatus'

export default function AdminBackup4() {

    //isAdmin fetch all orders
    const { loggedIn, isAdmin } = useAuthStatus()

    // display user's name and email
    const auth = getAuth()

    const [ formData, setFormData ] = useState({
        name: auth.currentUser.displayName,
        email: auth.currentUser.email,
    })

    const { name, email } = formData


    const { cartItems } = useCart()
    const navigate = useNavigate()

    // const auth = getAuth() allready declared

    function handleLogout() {
        auth.signOut()
        navigate("/")
    }

    // add new address & payment method
    const [ addressCount, setAddressCount ] = useState(0)
    const [ paymentCount, setPaymentCount ] = useState(0)

    const handleAddressCount = () => {
        setAddressCount(addressCount + 1)
    }

    const handlePaymentCount = () => {
        setPaymentCount(paymentCount + 1)
    }

   
    

    // pedir cambios
    const [ changes, setChanges ] = useState("")
    const docRef = collection(db, "cambios")

    const handleSubmit = (e) => {
        e.preventDefault()

        addDoc(docRef, {
            changes: changes,
        }).then(() => {
            if(!alert) {toast.success("Los cambios fueron enviados")}
            setChanges("")
        }).catch((error) => {
            console.log(error)
        })
    }
    
    // fetch cambios
    const [ changesList, setChangesList ] = useState([])
    useEffect(() => {
        async function fetchChanges() {
            const changesRef = collection(db, "cambios")
            const querySnap = await getDocs(changesRef)
            const changes = querySnap.docs.map((doc) => doc.data().changes)
            setChangesList(changes)
        }
        fetchChanges()
    }, [])

    // modal hook
    const changesModal = useModal()
    const aproveFirst = useModal()
    const aproveSecond = useModal()
    const myProfile = useModal()

    const imageModal = useModal()
   

    const [ selectedOrderImage, setSelectedOrderImage ] = useState("/images/identidad/isotipo.png")


     // fetch orders
     const [ orders, setOrders ] = useState([])
    
     useEffect(() => {
         async function fetchAllOrders() {
             const ordersRef = collection(db, "orders")
             const q = query(ordersRef, orderBy("timestamp", "desc"))
             const querySnap = await getDocs(q)
             let orders = []
             querySnap.forEach((doc) => {
                 const orderData = doc.data()
                 const orderWithImage = {
                    id: doc.id,
                    data: orderData,
                    image: null,

                 }
                 orders.push(orderWithImage)
                 })
                 setOrders(orders)
            
         }
         fetchAllOrders()
     }, [])
 

    // image preview
    const initialImagePreviews = useState(orders.map(order => ({ id: order.id, preview: null})))
    const [ imagePreviews, setImagePreviews ] = useState(initialImagePreviews)

    async function fetchImageURLs() {
        const imageUrls = await Promise.all(orders.map(async (order) => {
          // Fetch image URL for each order from Firestore or Storage
          // Replace the following line with your actual fetch logic
          const imageUrl = await getImageUrlFromFirestoreOrStorage(order.id);
          return { id: order.id, preview: imageUrl || '/images/identidad/isotipo.png' };
        }));
      
        setImagePreviews(imageUrls);
    }


    function handleImageUpload(e, index) {
        const imageFiles = e.target.files
        const previews = [...imagePreviews]

        for(let i = 0; i < imageFiles.length; i++) {
            const imageUrl = (URL.createObjectURL(imageFiles[i]))
            previews[index] = imageUrl

            const updatedOrders = [...orders]
            updatedOrders[index].image = imageUrl
            setOrders(updatedOrders)
        }
       
        setImagePreviews(previews)
    }    

    // upload preview images to Storage
    async function handlePreviewsSubmit(orderIndex) {

        const imagesToUpload = imagePreviews.filter((_, index) => index === orderIndex)

        if(imagesToUpload.length === 0) {
            toast.error("No se seleccionaron imágenes para cargar.")
            return
        }

        try {
            const imgUrls = await Promise.all(
                imagesToUpload.map(async (image) => {
                    const imageUrl = await storeImage(image)
                    return imageUrl
                })
            )
            const updatedOrders = [...orders]
            updatedOrders[orderIndex].imgUrls = imgUrls[0]
            setOrders(updatedOrders)
            toast.success('Las imágenes se cargaron correctamente.')

        } catch (error) {
            toast.error("Las imágenes no se cargaron correctamente...")
        }

        async function storeImage(image) {
                const storage = getStorage()
                const timestamp = new Date().getTime()
                const randomString = Math.random().toString(36).substring(2)
                const fileName = `${auth.currentUser.uid}-${timestamp}-${randomString}` // -${image.name}-${uuidv4()}
                const storageRef = ref(storage, fileName)
                const uploadTask = uploadBytesResumable(storageRef, image)

                return new Promise((resolve, reject) => {
                    uploadTask.on(
                        "state_changed",
                        (snapshot) => {
                            const progress =
                            (snapshot.bytesTransferred / snapshot.totalBytes) * 100
                            console.log("Upload is " + progress + "% done")
                    },
                    (error) => {
                        reject(error)
                    },
                    () => {
                        uploadTask.then(async () => {
                            try {
                                const downloadUrl = await getDownloadURL(storageRef)
                                resolve(downloadUrl)
                            } catch (error) {
                                reject(error)
                            }
                        })
                       
                    }
                )
                })
        }
    

       


    }
    

  return (
    <>
        <section className='max-w-6xl mx-auto flex flex-col justify-center items-center'>
            <h1 className='text-center text-3xl font-bold mt-6 mb-6'>Mis Pedidos</h1>

            <div className='flex items-center md:mr-[660px] justify-center space-x-10'>
                <img src="/images/iconos/icono-user.png" alt=""
                className='h-40' />
                <div className='flex flex-col space-y-4'> 
                    <h1 className='text-2xl font-semibold text-gray-900 '><span className='font-medium text-secondary-blueDark'>{name}</span></h1>
                    <p className='text-xl font-light text-gray-900' ><span className='font-medium text-secondary-blueDark'>{email}</span></p>


                    <button
                    onClick={myProfile.openModal} 
                    className='bg-gray-300 hover:bg-gray-400 active:bg-gray-500 
                    transition duration-200 ease-in-out rounded w-32 h-8 
                    tex-md text-gray-900 active:text-white'>Mis datos</button>

                    <Modal
                    isOpen={myProfile.isOpen}
                    onClose={myProfile.closeModal}>
                        <div className='flex flex-col space-y-4 bg-white md:w-[800px] md:h-[600px] px-12 py-12 '>
                            <div>
                                <h1 className='mb-3 text-2xl font-semibold text-gray-900'>Datos generales</h1>
                                <p className='font-medium'>Nombre del usario: <span className='font-medium text-secondary-blueDark'>{name}</span>  </p>
                                <p className='font-medium'>Email: <span className='font-medium text-secondary-blueDark'>{email}</span></p>
                                <p className='font-medium'>Edad: </p>
                                <p className='font-medium'>País: </p>
                            </div>
                            <div>
                                <h1 className='mt-3 mb-3 text-2xl font-semibold text-gray-900'>Datos de compra</h1>
                                <div className='flex flex-wrap md:justify-left md:space-x-6'>

                                    <div className='flex flex-col'>
                                        <div className='flex items-center'>
                                            <p className='font-medium mr-2'>Mis direcciones de envío</p> 
                                            <div 
                                            onClick={handleAddressCount}
                                            className='flex flex-col items-center justify-center cursor-pointer 
                                            bg-gray-200 rounded-full w-8 h-8 border-b-2 border-gray-400'>
                                                <p className='text-2xl'>+</p>
                                            </div>
                                        </div>
                                        <div className='flex flex-col space-y-6 mt-3'>
                                            {Array.from({ length: addressCount}).map((_, index) => (
                                                <>
                                                    <input 
                                                    key={index}
                                                    className='bg-gray-200 h-10 w-full border-transparent
                                                    focus:outline-none focus:border-transparent focus:ring-transparent'/>    
                                                </>
                                            ))}
                                        </div>
                                    </div>
                                    
                                    <div className='flex flex-col mt-6 md:mt-0'>
                                        <div className='flex items-center'>
                                            <p className='font-medium mr-2'>Métodos de pago</p> 
                                            <div 
                                            onClick={handlePaymentCount}
                                            className='flex flex-col items-center justify-center cursor-pointer
                                            bg-gray-200 rounded-full w-8 h-8 border-b-2 border-gray-400'>
                                                <p className='text-2xl'>+</p>
                                            </div>
                                        </div>
                                        <div className='flex flex-col space-y-6 mt-3'>
                                            {Array.from({ length: paymentCount}).map((_, index) => (
                                                <>
                                                    <input
                                                    key={index}
                                                    className='bg-gray-200 h-10 w-full border-transparent
                                                    focus:outline-none focus:border-transparent focus:ring-transparent ' />
                                                </>
                                            ))}
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                        
                    </Modal>
                </div>
            </div>
            
            {/* w-full md:w-[50%] mt-6 px-3 */}
            <div className='flex flex-col space-y-6'>
                
                <p className='text-center font-semibold text-2xl mt-12'>Historial de pruebas de impresión</p>

                <div className='bg-gray-200 md:h-full md:min-h-[250px] md:w-[1100px] rounded-xl'>
                    <div className='py-2 flex items-center justify-around border-b border-gray-900'>
                        <p className='border-r border-gray-900'>Producto</p>
                        <p>Compra realizada el</p>
                        <p>Prueba de impresión</p>
                        <p>Estado</p>
                    </div>


                  
                        {orders.map((order, index) => (
                            <>
                                <div className='flex items-center justify-around mt-3 ' key={order.id}>
                                    <div className=' flex flex-col items-center justify-center'>
                                     
                                                
                                            
                                       
                                        <img src={order.data.imgSrc} alt={order.data.product} className='h-24 w-24' />
                                        <p key={order.id} className='text-sm font-medium'>{order.data.product} x{order.data.quantity}</p>
                                    </div>

                                    <div className='flex flex-col ml-16 text-xs'>
                                        {/* <p>20 de agosto de 2023</p> */}
                                        <p key={order.id}>
                                        {order.timestamp ? (
                                        new Date(order.timestamp).toLocaleString('es-MX', {
                                            year: 'numeric',
                                            month: 'long',
                                            day: 'numeric',
                                            hour: 'numeric',
                                            minute: 'numeric',
                                            second: 'numeric',
                                            timeZoneName: 'short',
                                        })
                                    ) : (
                                        'Timestamp Not Available'
                                    )}
                                                
                                           </p>
                                        <p>13:45</p>
                                        <p>n.123456789</p>
                                    </div>

                                    <div className='flex space-x-3'>
                                        <div  key={order.id}  className='bg-white h-[120px] w-[120px] flex items-center justify-center'>
                                        <label htmlFor={`fileInput-${index}`} className='cursor-pointer'>
                                            <input 
                                            id={`fileInput-${index}`}
                                            type="file"
                                            accept='.jpg,.png,.jpeg'
                                            onChange={(e) => handleImageUpload(e, index)}
                                            required
                                            style={{display: "none"}} />

                                            <img 
                                            src={imagePreviews[index] || "/images/identidad/isotipo.png"} 
                                            alt={order.id} 
                                            className='h-24 w-24'
                                            onClick={() => setSelectedOrderImage(imagePreviews[index] || '/images/identidad/isotipo.png')}/>

                                            {/* {order.image 
                                            ? (
                                                
                                                <img src={order.image} alt={order.id} className='h-24 w-24'/> 
                                            ) 
                                            : <img  src="/images/identidad/isotipo.png" alt={order.data.product} 
                                              className='h-24 w-24' />
                                            } */}

                                          
                                            
                                        </label>
                                        
                                        </div>

                                        <div className='flex flex-col items-center justify-center space-y-3'>
                                            <p className='text-xs '>enviada el 21 de agosto 2023, 09:30</p>

                                            <button 
                                            onClick={async () => {
                                                setSelectedOrderImage(orders[index].image || "/images/identidad/isotipo.png");
                                                await handlePreviewsSubmit(index);
                                                imageModal.openModal();
                                            }}
                                            className='bg-secondary-blueLight hover:bg-sky-300 active:bg-sky-400 
                                            text-xs active:text-white px-4 py-2 transition duration-200 ease-in-out'>
                                                Revisar prueba
                                            </button>

                                            <button 
                                            onClick={changesModal.openModal}
                                            className='bg-secondary-blueLight hover:bg-sky-300 active:bg-sky-400 
                                            text-xs active:text-white px-4 py-2 transition duration-200 ease-in-out'>
                                                Pedir cambios
                                            </button>

                                            <Modal
                                            isOpen={imageModal.isOpen}
                                            onClose={imageModal.closeModal}
                                            >
                                               {selectedOrderImage && (
                                                <img src={selectedOrderImage} alt='Preview'
                                                className='h-96 rounded' />
                                               )}
                                            </Modal>

                                            
                                            <Modal
                                            isOpen={changesModal.isOpen}
                                            onClose={changesModal.closeModal}>
                                               <form onSubmit={handleSubmit}>
                                                    <div className='flex flex-col items-center justify-center space-y-6'>

                                                        
                                                        {changesList.map((changes, index) => (    
                                                            <>
                                                                <textarea className={`${style[0].input}`} key={index}>{changes}</textarea>
                                                            </>   
                                                        ))}

                                                        <p className='text-sm text-gray-900'>
                                                            Introduce en el siguinte campo de texto los ajustes que se requieran hacer.
                                                        </p>
                                                        
                                                        <textarea 
                                                        rows="2"
                                                        value={changes}
                                                        onChange={(e) => setChanges(e.target.value)}
                                                        className={`${style[0].input} text-gray-900 text-sm`}/>

                                                        <button 
                                                        type='submit'
                                                        className='bg-gray-200 hover:bg-gray-300 active:bg-gray-400
                                                        text-gray-900 active:text-white px-5 py-1'
                                                        >Enviar</button>
                                                        
                                                    </div>
                                                </form>
                                            </Modal>

                                        </div>
                                    </div>

                                    <div className='flex flex-col items-center justify-center space-y-3'>
                                        <p className='text-xs font-semibold'>Pendiente por aprobar</p>
                                        <p className='text-xs underline'>Leer nuestras condiciones <br />antes de aprobar</p>
                                        
                                        
                                        <button 
                                        onClick={aproveFirst.openModal}
                                        className='bg-secondary-blueLight hover:bg-sky-300 active:bg-sky-400 
                                        text-xs active:text-white px-4 py-1 transition duration-200 ease-in-out rounded'>
                                        Aprobar prueba #1</button>
                                        
                                        
                                        <button
                                        onClick={aproveSecond.openModal} 
                                        className='bg-secondary-blueLight hover:bg-sky-300 active:bg-sky-400 
                                        text-xs active:text-white px-4 py-1 transition duration-200 ease-in-out rounded'>
                                        Aprobar prueba #2</button>

                                        <Modal
                                        isOpen={aproveFirst.isOpen}
                                        onClose={aproveFirst.closeModal}>
                                            <div className='flex flex-col items-center justify-center'>
                                                <p className='text-sm mb-3'>Estás a punto de aprobar la prueba digital de impresión #1. ¿Estás seguro?</p>
                                                <button 
                                                className='text-center bg-gray-200 hover:bg-gray-300 active:bg-gray-400 
                                                px-3 py-1 text-sm text-gray-900 active:text-white transition duration-200 ease-in-out'>
                                                    aprobar prueba #1
                                                </button>
                                            </div>
                                        </Modal>

                                        <Modal
                                        isOpen={aproveSecond.isOpen}
                                        onClose={aproveSecond.closeModal}>
                                            <div className='flex flex-col items-center justify-center'>
                                                <p className='text-sm mb-3'>Estás a punto de aprobar la prueba digital de impresión #2. ¿Estás seguro?</p>
                                                <button 
                                                className='text-center bg-gray-200 hover:bg-gray-300 active:bg-gray-400 
                                                px-3 py-1 text-sm text-gray-900 active:text-white transition duration-200 ease-in-out'>
                                                    aprobar prueba #2
                                                </button>
                                            </div>
                                        </Modal>

                                    </div>

                                </div>
                            
                            </>
                        ))}
                    
                </div>

                <div className='flex flex-col items-center space-y-6'>
                
                <p className='text-center font-semibold text-2xl mt-12'>Historial de compras</p>
                    <div className='bg-gray-200 md:h-full md:min-h-[250px] md:w-[900px] rounded-xl'>
                            <div className='flex justify-around mt-3 border-b border-gray-900'>
                                <p>Compra</p>
                                <p>Total</p>
                                <p></p>
                            </div>
                            
                            {cartItems.map((item, index) => (
                                <>
                                <div className='flex items-center justify-around mt-8'>
                                    <div key={index} className='flex items-center space-x-6  '>
                                    <img src={item.imgSrc} alt="" className='h-24 w-24' />
                                    <div className='text-xs'>
                                        <p className='font-semibold'>{item.product}</p>
                                        <p className='font-semibold'>Cant. 1</p>
                                        <p>Fecha: 20 de agosto 2023. Hora: 13:45 </p>
                                        <p>Número de orden: 0123456789</p>
                                    </div>
                                    </div>

                                    <div className='mr-24'>
                                        <p className='text-xs'>${item.price}mxn</p>
                                    </div>

                                    <button className='bg-gray-300 hover:bg-gray-400 active:bg-gray-500
                                    text-sm text-gray-900 active:text-white px-5 py-1'>Repetir pedido</button>
                                </div>
                                </>
                            ))}
                            
                    </div>
                </div>
              
                
                <p
                onClick={handleLogout}
                className='text-blue-600 hover:text-blue-800 transiton duration-200 ease-in-out cursor-pointer'>
                    Cerrar Sesión
                </p>
            </div>





        </section>
    </>
  )
}
